# Compose stack for local observability sandbox (optional) to accompany the Analyzer API.
# - sample_app: simple Node service with OpenTelemetry auto-instrumentation
# - otel-collector: receives traces/metrics and exports to Jaeger/Prometheus
# - jaeger: UI for distributed traces at http://localhost:16686
# - prometheus: scrapes collector metrics at http://localhost:9090
# - grafana: optional dashboards at http://localhost:3001 (admin/admin by default)
version: "3.9"
services:
  sample_app:
    # Example app to emit traces/metrics to the collector
    build: ./sample_app
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_RESOURCE_ATTRIBUTES=service.name=sample-app,service.version=0.1.0,service.namespace=starter
    ports:
      - "3000:3000"
    depends_on:
      - otel-collector

  otel-collector:
    # Receives OTLP over gRPC/HTTP and exports to Jaeger/Prometheus
    image: otel/opentelemetry-collector:0.109.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"

  jaeger:
    # Jaeger UI at http://localhost:16686
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    depends_on:
      - otel-collector

  prometheus:
    # Prometheus UI at http://localhost:9090
    image: prom/prometheus:v2.53.0
    volumes:
      - ./otel/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    # Grafana UI at http://localhost:3001 (default admin/admin)
    image: grafana/grafana:11.1.0
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
